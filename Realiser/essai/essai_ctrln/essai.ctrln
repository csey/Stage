(* --- Generated the 26/5/2016 at 12:11 --- *)
(* --- heptagon compiler, version 1.03.00 (compiled tue. may. 24 19:48:24 CET 2016) --- *)
(* --- Command line: /home/seydou/.opam/4.02.3/bin/heptc -target c -target ctrln essai.ept --- *)

!typedef
  St_3 = enum {St_3_Presence, St_3_Nothing};
  St_2 = enum {St_2_Stop, St_2_Mouvement};
  St_1 = enum {St_1_Stop, St_1_Mouvement};
  St = enum {St_Presence, St_Nothing};
  
!state
  ck: St_3;
  ck_4: St_2;
  pnr_1: bool;
  pnr: bool;
  __init__: bool;
  ok: bool;
  property: bool;
  y: bool;
  
!input
  presenceMaison: bool;
  
!controllable
  entree: bool;
  sortie: bool;
  
!local
  v_2, r_1_St_3_Presence, r_1_St_3_Nothing, nr_1_St_3_Presence,
  occuper_St_3_Presence, nr_1_St_3_Nothing, occuper_St_3_Nothing, v_4, v_3,
  r_St_2_Mouvement, r_St_2_Stop, nr_St_2_Mouvement, etat_St_2_Mouvement,
  nr_St_2_Stop, etat_St_2_Stop, v, r_1, nr_1, r, nr, demandeEtage,
  arriveEtage, etat, presence, occuper, m, l: bool;
  s_1_St_3_Presence: St_3;
  s_1_St_3_Nothing: St_3;
  ns_1_St_3_Presence: St_3;
  ns_1_St_3_Nothing: St_3;
  ck_3: St_3;
  s_St_2_Mouvement: St_2;
  s_St_2_Stop: St_2;
  ns_St_2_Mouvement: St_2;
  ns_St_2_Stop: St_2;
  ck_5: St_2;
  s_1: St_3;
  ns_1: St_3;
  s: St_2;
  ns: St_2;
  
!definition
  v_2 = not presence;
  r_1_St_3_Presence = (v_2 or pnr_1);
  s_1_St_3_Presence = (if v_2 then St_3_Nothing else St_3_Presence);
  r_1_St_3_Nothing = (presence or pnr_1);
  s_1_St_3_Nothing = (if presence then St_3_Presence else St_3_Nothing);
  nr_1_St_3_Presence = false;
  ns_1_St_3_Presence = St_3_Presence;
  occuper_St_3_Presence = true;
  nr_1_St_3_Nothing = false;
  ns_1_St_3_Nothing = St_3_Nothing;
  occuper_St_3_Nothing = false;
  ck_3 = s_1;
  v_4 = (v_3 or arriveEtage);
  v_3 = not demandeEtage;
  r_St_2_Mouvement = (v_4 or pnr);
  s_St_2_Mouvement = (if v_4 then St_2_Stop else St_2_Mouvement);
  r_St_2_Stop = (demandeEtage or pnr);
  s_St_2_Stop = (if demandeEtage then St_2_Mouvement else St_2_Stop);
  nr_St_2_Mouvement = false;
  ns_St_2_Mouvement = St_2_Mouvement;
  etat_St_2_Mouvement = true;
  nr_St_2_Stop = false;
  ns_St_2_Stop = St_2_Stop;
  etat_St_2_Stop = false;
  ck_5 = s;
  v = not l;
  s_1 = (if (ck = St_3_Nothing) then s_1_St_3_Nothing else s_1_St_3_Presence);
  ns_1 = (if (ck_3 = St_3_Nothing) then ns_1_St_3_Nothing else
         ns_1_St_3_Presence);
  r_1 = (if (ck = St_3_Nothing) then r_1_St_3_Nothing else r_1_St_3_Presence);
  nr_1 = (if (ck_3 = St_3_Nothing) then nr_1_St_3_Nothing else
         nr_1_St_3_Presence);
  s = (if (ck_4 = St_2_Stop) then s_St_2_Stop else s_St_2_Mouvement);
  ns = (if (ck_5 = St_2_Stop) then ns_St_2_Stop else ns_St_2_Mouvement);
  r = (if (ck_4 = St_2_Stop) then r_St_2_Stop else r_St_2_Mouvement);
  nr = (if (ck_5 = St_2_Stop) then nr_St_2_Stop else nr_St_2_Mouvement);
  demandeEtage = entree;
  arriveEtage = sortie;
  etat = (if (ck_5 = St_2_Stop) then etat_St_2_Stop else etat_St_2_Mouvement);
  presence = presenceMaison;
  occuper = (if (ck_3 = St_3_Nothing) then occuper_St_3_Nothing else
            occuper_St_3_Presence);
  m = occuper;
  l = etat;
  
!transition
  ck'= ns_1;
  ck_4'= ns;
  pnr_1'= nr_1;
  pnr'= nr;
  __init__'= false;
  ok'= true;
  property'= (m or v);
  y'= m;
  
!initial
  (ck = St_3_Nothing) and not pnr_1 and (ck_4 = St_2_Stop) and not pnr and
  __init__;
!assertion
  true;
!invariant
  (__init__ or ok and property);
