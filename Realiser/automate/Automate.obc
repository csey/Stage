-- Code generated by the MiniLucid Compiler
type st = St_Up| St_Down
machine updown =
  var ck: st; pnr: bool; x_1: int;
  
  step() returns (y: int) {
    var v: bool; v_1: bool; nr_St_Down: bool; ns_St_Down: st; x_St_Down: int;
        nr_St_Up: bool; ns_St_Up: st; x_St_Up: int; ns: st; r: bool;
        nr: bool; x: int;
    r = mem(pnr);
    switch (mem(ck)) {
      case St_Up:
        x_St_Up = ((+) mem(x_1) 1);
        x = x_St_Up;
        v_1 = ((>=) x 10);
        switch (v_1) {
          case true:
            nr_St_Up = true;
            ns_St_Up = St_Down
          case false:
            nr_St_Up = false;
            ns_St_Up = St_Up
        };
        ns = ns_St_Up;
        nr = nr_St_Up
      case St_Down:
        x_St_Down = ((-) mem(x_1) 1);
        x = x_St_Down;
        v = ((<=) x 0);
        switch (v) {
          case true:
            nr_St_Down = true;
            ns_St_Down = St_Up
          case false:
            nr_St_Down = false;
            ns_St_Down = St_Down
        };
        ns = ns_St_Down;
        nr = nr_St_Down
    };
    y = x;
    mem(x_1) = x;
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(x_1) = 0;
    mem(pnr) = false;
    mem(ck) = St_Up
  }


