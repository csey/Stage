type numero=Un|Deux|Trois|Quatre|Cinq|Six|PointMort
type lum = Null|Low|Normal|High
type couleur = Vert|Jaune|Rouge
type position = Ville|Autoroute
type etatPhares = Idle|Veilleuses|Codes|Phares
type cause = PresencePieton|Presencevehicule|Feu|None
type retro = Desactive|PositionJour|PositionNuit|PositionNormale
type typeBalayage = Deactivated|Intermittent|Contiu|Unique
node moteur(commande,cle:bool) returns (etat:bool)
let 
	automaton
		state Allumer
			do etat = true;
			unless not commande & not cle then Eteint
		state Eteint
			do etat = false;
			unless commande or cle then Allumer
	end
tel

node vitesse (boiteDeVitesse:numero) returns (num: numero)
let 
	automaton
		state Zero
			do num = PointMort;
			unless  boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Quatre then Quatrieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = Un then Premier
		state Premier
			do num = Un;
			unless  boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Quatre then Quatrieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = PointMort then Zero
		state Deuxieme
			do num = Deux;
			unless  boiteDeVitesse = Un then Premier
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Quatre then Quatrieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = PointMort then Zero
		state Troisieme
			do num = Trois;
			unless  boiteDeVitesse = Un then Premier
			| boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Quatre then Quatrieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = PointMort then Zero
		state Quatrieme
			do num = Quatre;
			unless  boiteDeVitesse = Un then Premier
			| boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = PointMort then Zero
		state Cinquieme
			do num = Cinq;
			unless  boiteDeVitesse = Un then Premier
			| boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Quatre then Troisieme
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Six then Arriere
			| boiteDeVitesse = PointMort then Zero
		state Arriere
			do num = Six;
			unless  boiteDeVitesse = Un then Premier
			| boiteDeVitesse = Deux then Deuxieme
			| boiteDeVitesse = Quatre then Troisieme
			| boiteDeVitesse = Trois then Troisieme
			| boiteDeVitesse = Cinq then Cinquieme
			| boiteDeVitesse = PointMort then Zero
	end
tel

node acceleration(frein, accelerateur:bool) returns (avance:bool)
let 
	automaton
		state Move
			do avance = true;
			unless frein then Stop
		state Stop
			do avance = false;
			unless accelerateur then Move
	end
tel

node retroviseurs (normal,jour,nuit: bool) returns (gerer:bool;sortie:retro)
let 
	automaton
		state Desacitve
			do gerer = false ;
			sortie = Desactive;
			unless jour then PositionJour
			| nuit then PositionNuit
			| normal then PositionNormale			
		state PositionNormale
			do gerer = true ;
			sortie = PositionNormale;
			unless jour then PositionJour
			| nuit then PositionNuit
			| not normal & not jour & not nuit then Desacitve
		state PositionJour
			do gerer = true ;
			sortie = PositionJour;
			unless normal then PositionNormale
			| nuit then PositionNuit
			|  not normal & not jour & not nuit then Desacitve
		state PositionNuit
			do gerer = true ;
			sortie = PositionNuit;
			unless jour then PositionJour
			| normal then PositionNormale
			| not normal & not jour & not nuit then Desacitve
	end
tel

node essuieGlace (con, cclose: bool; densite : lum) returns (etat: typeBalayage)
let 
	automaton
		state Desactive
			do etat = Deactivated;
			unless con then BalayageUnique
		state BalayageUnique
			do etat = Unique;
			unless cclose then Desactive
			| con & (densite = High) then BalayageContiu
			| con & (densite = Normal) then BalayageIntermittent
		state BalayageIntermittent
			do etat = Intermittent;
			unless cclose then Desactive
			|con & (densite = High) then BalayageContiu
			|con & (densite = Low) then BalayageUnique
		state BalayageContiu
			do etat = Contiu;
			unless cclose then Desactive
			|con & (densite = Low) then BalayageUnique
			|con & (densite = Normal) then BalayageIntermittent
	end
tel

node accident (detectionAccident: bool) returns (airbag, emissionAppelUrgence: bool)
let
	automaton
		state Desactive
			do (airbag, emissionAppelUrgence) = (false, false);
			unless detectionAccident then Active
		state Active 
			do (airbag, emissionAppelUrgence) = (true, true);
			unless not detectionAccident then Active
	end
tel

node avertissement (detectionDepassementLigne, detectionVolantLibre,detectionDefaillanceTechnique, detectionVehiculeAngleMort:bool) returns (depassementLigne,volantLibre,defaillanceTechnique, dangerAngleMort:bool)
let
	automaton
		state Idle
		do (depassementLigne,volantLibre,defaillanceTechnique, dangerAngleMort) = (false,false, false, false);
		unless detectionDepassementLigne or detectionVolantLibre or detectionDefaillanceTechnique or detectionVehiculeAngleMort then Detection
		state Detection
		do (depassementLigne,volantLibre,defaillanceTechnique,dangerAngleMort) = (detectionDepassementLigne, detectionVolantLibre,detectionDefaillanceTechnique,detectionVehiculeAngleMort);
		unless not detectionDepassementLigne & not detectionVolantLibre & not detectionDefaillanceTechnique & not detectionVehiculeAngleMort then Idle
	end
tel

node securite (presencePieton, presencevehicule:bool; feu : couleur) returns (frein:bool; causeFreinage: cause)
let 
	automaton
		state Acceleration
			do frein = false;
			causeFreinage = None;
			unless presencePieton then Pieton
			| not presencePieton & presencevehicule then Vehicule
			| not presencePieton & not presencevehicule & (feu <> Vert) then Feu
		state Pieton
			do frein = true;
			causeFreinage = PresencePieton;
			unless not presencePieton & not presencevehicule & (feu = Vert) then Acceleration
			| not presencePieton & presencevehicule then Vehicule
			| not presencePieton & not presencevehicule & (feu <> Vert) then Feu
		state Vehicule
			do frein = true;
			causeFreinage = Presencevehicule;
			unless not presencePieton & not presencevehicule & (feu = Vert) then Acceleration
			| presencePieton then Pieton
			| not presencePieton & not presencevehicule & (feu <> Vert) then Feu
		state Feu
			do frein = true;
			causeFreinage = Feu;
			unless not presencePieton & not presencevehicule & (feu = Vert) then Acceleration
			| presencePieton then Pieton
			| not presencePieton & presencevehicule then Vehicule
	end
tel

node temperature (deactivated: bool; capteur:float) returns (qt: float; etat:bool)
let
	automaton
		state Active
			do etat = true;
			qt = 19.0 -. capteur;
			unless deactivated then Desactive
		state Desactive
			do etat = false;
			qt = 0.0;
			unless not deactivated then Active
	end
tel

node controleurPhares(tdn,tin,cpn,i,c,v,p:bool) returns (codes,phares,veilleuses:bool; etat:etatPhares)
let 
	automaton
		state Idle
			do (codes,phares,veilleuses,etat) = (false, false, false,Idle);
			unless tdn then Veilleuses
			|c then Codes
			|p then Phares
		state Veilleuses
			do (codes,phares,veilleuses,etat) = (false, false, true,Veilleuses);
			unless tin then Idle
			|tdn then Codes
			|p then Phares
		state Codes
			do (codes,phares,veilleuses,etat) = (true, false, false,Codes);
			unless tin then Veilleuses
			|cpn then Phares
			|c then Codes
			|i then Idle
		state Phares
			do (codes,phares,veilleuses,etat) = (false, true, false,Phares);
			unless cpn then Codes
			|v then Veilleuses
			|i then Idle
	end
tel


node automobile (cleVoiture,commandeVoiture,capteurPluie,detectionAccident,detectionLigne, detectionVolantLibre,detectionDefaillanceTechnique, detectionAngleMort,detectionPresencePieton,detectionPresencevehicule,desactiveRegulateurTemperature:bool;lumiere,densitePluie:lum;capteurTemperature:float;capteurDectecteurFeu:couleur) returns (moteur, avance,retroviseurActive, etatRegulateurTemperature,accident,ligne,volantLibre,defaillanceTechnique,angleMort,freinage,property:bool;causeFreinage:cause; vitesses:numero; quantiteRegule: float;phares: etatPhares;retroviseurStatus:retro;essuieGlace:typeBalayage)
contract
 assume true
 enforce property
 with (con,cclose,td,ti,cp,frein, accelerateur,normal,jour,nuit,i,c,v,p:bool;boiteDeVitesse:numero;)
var
lmoteur,lretroviseur,lavance,lairbag,lemissionAppelUrgence,lLigne,lvolantLibre,ldefaillanceTechnique, langleMort,lfrein,letatRegulateurTemperature,lcodes,lphares,lveilleuses,prop1, prop2,prop3,prop4,prop5,prop6,prop7,prop8,prop9,prop10,prop11,prop12,prop13,prop14,prop15,prop16,prop17,prop18,prop19,prop20,prop21,prop22,prop23,prop24:bool;
lessuieGlace : typeBalayage;
lnumero:numero;
lqt : float;
lcause: cause;
lstate: etatPhares;
lsortie: retro;
let
	lmoteur = inlined moteur(commandeVoiture,cleVoiture);
	lnumero =  inlined vitesse (boiteDeVitesse);
	lavance = inlined acceleration(frein, accelerateur);
	(lretroviseur,lsortie) = inlined retroviseurs (normal,jour,nuit); 
	lessuieGlace = inlined essuieGlace (con, cclose, densitePluie);
	(lairbag,lemissionAppelUrgence) = inlined accident (detectionAccident);
	(lLigne,lvolantLibre,ldefaillanceTechnique, langleMort)  = inlined avertissement (detectionLigne, detectionVolantLibre,detectionDefaillanceTechnique, detectionAngleMort);
	(lfrein,lcause) = inlined securite (detectionPresencePieton, detectionPresencevehicule, capteurDectecteurFeu);
	(lqt, letatRegulateurTemperature) = inlined temperature (desactiveRegulateurTemperature, capteurTemperature);
	(lcodes,lphares,lveilleuses,lstate)= inlined controleurPhares(td,ti,cp,i,c,v,p);

	prop1 = lmoteur or (lnumero = PointMort);
	prop2 = lmoteur or not lretroviseur;
	prop3 = lmoteur or (lessuieGlace = Deactivated);
(*ces proprietes de 4 a 7 sont pas vraiment inutiles, elles sont liees au capteur, du coup non controlable et ne fonctionnne pas par consequent mais possible lorsqu'on fait une supposition avec assume disant que s'il n'y a pas de cle ou commande alors le detecteur est eteint. Il est également preferable de mettre une propriete en assume tel que si le moteur est eteint alors le regulateur de temperature est desactive*)
	prop4 = lmoteur or not lLigne;
	prop5 = lmoteur or not lvolantLibre;
	prop6 = lmoteur or not ldefaillanceTechnique;
	prop7 = lmoteur or not langleMort;

	prop8 = lmoteur or not lcodes;
	prop9 = lmoteur or not lphares;
	prop10 = lmoteur or not lveilleuses;
	prop11 = lmoteur or not lavance;
	prop12 = lavance or (lnumero = PointMort);
	prop13 = not lavance or (lnumero <> PointMort);
	prop14 = not lfrein or not lavance;
	prop15 = not (lumiere = Normal) or (lsortie = PositionNormale);
	prop16 = not (lumiere = Low) or (lsortie = PositionNuit);
	prop17 = not (lumiere = High) or (lsortie = PositionJour);
	prop18 = capteurPluie or (lessuieGlace = Deactivated);
	prop19 = not capteurPluie or (lessuieGlace <> Deactivated);
	prop20 = not lmoteur or (lsortie <> Desactive);
	prop21 =  not (lumiere = Normal) or (lstate = Veilleuses);
	prop22 =  not (lumiere = Low) or (lstate = Phares);

	prop23 = not lemissionAppelUrgence or not lavance;
	prop24 = not (lumiere = Null) or (lsortie = Desactive);

	property= prop8 & prop9 & prop10 & prop11 & prop12 & prop13 & prop14 & prop15 & prop16 & prop17 & prop18 & prop19 & prop20 & prop21 & prop22;

	moteur = lmoteur ;
	avance = lavance;
	retroviseurActive = lretroviseur;
	retroviseurStatus = lsortie;
	etatRegulateurTemperature = letatRegulateurTemperature;
	essuieGlace = lessuieGlace;
	accident = lairbag or lemissionAppelUrgence;
	ligne = lLigne;
	volantLibre = lvolantLibre;
	defaillanceTechnique = 	ldefaillanceTechnique;
	angleMort = langleMort;
	freinage = lfrein;
	causeFreinage = lcause;
	vitesses = lnumero;
	quantiteRegule = lqt;
	phares = lstate;
	
tel
































