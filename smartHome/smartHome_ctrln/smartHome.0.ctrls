!typedef
  St_21 = enum {St_21_Presence, St_21_Nothing};
  St_20 = enum {St_20_Presence, St_20_Nothing};
  St_19 = enum {St_19_Presence, St_19_Nothing};
  St_18 = enum {St_18_On, St_18_Off};
  St_17 = enum {St_17_Presence, St_17_Nothing};
  St_16 = enum {St_16_Ouvrir, St_16_Fermer};
  St_15 = enum {St_15_Ouvrir, St_15_Fermer};
  St_14 = enum {St_14_Idle, St_14_Avant, St_14_Arriere};
  St_13 = enum {St_13_Ouvrir, St_13_Fermer};
  St_12 = enum {St_12_Idle, St_12_Avant, St_12_Arriere};
  St_11 = enum {St_11_Ouvrir, St_11_Fermer};
  St_10 = enum {St_10_Vigilence, St_10_Sonner, St_10_Arret, St_10_Allume};
  St_9 = enum {St_9_Stop, St_9_Mouvement};
  St_8 = enum {St_8_Stop, St_8_Mouvement};
  St_7 = enum {St_7_Vigilence, St_7_Sonner, St_7_Arret, St_7_Allume};
  St_6 = enum {St_6_Ouvrir, St_6_Fermer};
  St_5 = enum {St_5_Ouvrir, St_5_Fermer};
  St_4 = enum {St_4_Ouvrir, St_4_Fermer};
  St_3 = enum {St_3_On, St_3_Off};
  St_2 = enum {St_2_Idle, St_2_Avant, St_2_Arriere};
  St_1 = enum {St_1_NoPresence, St_1_Avant, St_1_Arriere};
  St = enum {St_Presence, St_Nothing};
  Position = enum {Avant, Arriere, Null};
  Porte = enum {Ouvert, Fermer};
  Lum = enum {Rouge, Vert, Jaune};
  Stat = enum {Arret, EnMouvement};
  
!input
  ck: St_21;
  ck_11: St_20;
  ck_13: St_19;
  ck_15: St_18;
  ck_17: St_17;
  ck_19: St_16;
  ck_21: St_15;
  ck_23: St_14;
  ck_25: St_13;
  ck_27: St_12;
  ck_29: St_11;
  ck_31: St_10;
  v_172: int;
  v_177: int;
  v_185: int;
  ck_33: St_9;
  pnr_12: bool;
  pnr_11: bool;
  pnr_10: bool;
  pnr_9: bool;
  pnr_8: bool;
  pnr_7: bool;
  pnr_6: bool;
  pnr_5: bool;
  pnr_4: bool;
  pnr_3: bool;
  pnr_2: bool;
  pnr_1: bool;
  pnr: bool;
  reprise_2: int;
  vigilence_2: int;
  temps_2: int;
  __init__: bool;
  ok: bool;
  property: bool;
  ascenseur: bool;
  etatAlarme: Lum;
  alarmeSonne: bool;
  ouvertureStore: bool;
  capteurPositionBarriere: Position;
  barriere: Porte;
  capteurPositionPorte: Position;
  porteStatus: Porte;
  poubelleOuvert: bool;
  lumiere: bool;
  etatMaison: bool;
  presenceMaison: bool;
  presenceAscenseur: bool;
  presenceGarage: bool;
  presenceDevantPoubelle: bool;
  vent: bool;
  luminosite: bool;
  marcheArretAlarme: bool;
  codeAlarme: bool;
  codePorte: bool;
  codeBarriere: bool;
  presenceEntreePorte: bool;
  presenceSortiePorte: bool;
  presenceEntreeBarriere: bool;
  presenceSortieBarriere: bool;
  dReprise: int;
  dVigilence: int;
  dAlarme: int;
  
!output
  interrupteur: bool;
  copen: bool;
  close: bool;
  openPorte: bool;
  openBarriere: bool;
  con: bool;
  coff: bool;
  demandeEtage: bool;
  arriveEtage: bool;
  
!local
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16,
  l17, l18: bool;
  
!definition
  l0 = not luminosite;
  l2 = not vent;
  l6 = not presenceMaison;
  l9 = not presenceSortiePorte;
  l10 = not codePorte;
  l11 = not presenceSortieBarriere;
  l12 = not codeBarriere;
  l13 = (not ((ck_19 = St_16_Fermer)) or presenceDevantPoubelle);
  l14 = not presenceDevantPoubelle;
  l16 = (not ((ck_33 = St_9_Stop)) or presenceAscenseur);
  l17 = not presenceAscenseur;
  openPorte = (if presenceEntreePorte then l10 else l9);
  openBarriere = (if presenceEntreeBarriere then l12 else l11);
  con = l13;
  demandeEtage = l16;
  l1 = (l0 or vent);
  l3 = luminosite and l2;
  l15 = (not ((ck_19 = St_16_Ouvrir)) or l14);
  l18 = (not ((ck_33 = St_9_Mouvement)) or l17);
  interrupteur = presenceMaison and l1;
  coff = l15;
  arriveEtage = l18;
  l4 = presenceMaison and l3;
  l7 = (l6 or l1);
  l5 = (not ((ck_29 = St_11_Fermer)) or l4);
  l8 = (not ((ck_29 = St_11_Ouvrir)) or l7);
  copen = l5;
  close = l8;
  
!assertion
  true;
