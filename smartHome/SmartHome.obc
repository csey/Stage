-- Code generated by the MiniLucid Compiler
type st_1 = St_1_Vide| St_1_Presence
type st = St_Vide| St_Presence
machine maison =
  var ck: st; pnr: bool;
  
  step(presence: bool) returns (occuper: bool) {
    var v: bool; nr_St_Presence: bool; ns_St_Presence: st;
        occuper_St_Presence: bool; nr_St_Vide: bool; ns_St_Vide: st;
        occuper_St_Vide: bool; ns: st; r: bool; nr: bool;
    r = mem(pnr);
    switch (mem(ck)) {
      case St_Vide:
        occuper_St_Vide = false;
        switch (presence) {
          case true:
            nr_St_Vide = true;
            ns_St_Vide = St_Presence
          case false:
            nr_St_Vide = false;
            ns_St_Vide = St_Vide
        };
        occuper = occuper_St_Vide;
        ns = ns_St_Vide;
        nr = nr_St_Vide
      case St_Presence:
        occuper_St_Presence = true;
        v = not(presence);
        switch (v) {
          case true:
            nr_St_Presence = true;
            ns_St_Presence = St_Vide
          case false:
            nr_St_Presence = false;
            ns_St_Presence = St_Presence
        };
        occuper = occuper_St_Presence;
        ns = ns_St_Presence;
        nr = nr_St_Presence
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_Vide
  }

machine smartHome =
  var ck: st_1; pnr: bool;
  
  step(presenceMaison: bool) returns (etatMaison: bool, property: bool) {
    var v: bool; nr_St_1_Presence: bool; ns_St_1_Presence: st_1;
        occuper_St_1_Presence: bool; nr_St_1_Vide: bool; ns_St_1_Vide: st_1;
        occuper_St_1_Vide: bool; ns: st_1; r: bool; nr: bool; presence: bool;
        occuper: bool; loccuperMaison: bool;
    presence = presenceMaison;
    r = mem(pnr);
    property = true;
    switch (mem(ck)) {
      case St_1_Vide:
        occuper_St_1_Vide = false;
        switch (presence) {
          case true:
            nr_St_1_Vide = true;
            ns_St_1_Vide = St_1_Presence
          case false:
            nr_St_1_Vide = false;
            ns_St_1_Vide = St_1_Vide
        };
        occuper = occuper_St_1_Vide;
        ns = ns_St_1_Vide;
        nr = nr_St_1_Vide
      case St_1_Presence:
        occuper_St_1_Presence = true;
        v = not(presence);
        switch (v) {
          case true:
            nr_St_1_Presence = true;
            ns_St_1_Presence = St_1_Vide
          case false:
            nr_St_1_Presence = false;
            ns_St_1_Presence = St_1_Presence
        };
        occuper = occuper_St_1_Presence;
        ns = ns_St_1_Presence;
        nr = nr_St_1_Presence
    };
    loccuperMaison = occuper;
    etatMaison = loccuperMaison;
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_1_Vide
  }


