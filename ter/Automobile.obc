-- Code generated by the MiniLucid Compiler
type st_9 = St_9_Veilleuses| St_9_Phares| St_9_Idle| St_9_Codes
type st_8 = St_8_Desactive| St_8_Active
type st_7 = St_7_Vehicule| St_7_Pieton| St_7_Feu| St_7_Acceleration
type st_6 = St_6_Idle| St_6_Detection
type st_5 = St_5_Desactive| St_5_Active
type st_4 = St_4_Desactive| St_4_BalayageUnique| St_4_BalayageIntermittent|
St_4_BalayageContiu
type st_3 = St_3_PositionNuit| St_3_PositionNormale| St_3_PositionJour|
St_3_Desacitve
type st_2 = St_2_Stop| St_2_Move
type st_1 = St_1_Troisieme| St_1_Quatrieme| St_1_Premier| St_1_Deuxieme|
St_1_Cinquieme| St_1_Arriere
type st = St_Eteint| St_Allumer
type numero = Un| Deux| Trois| Quatre| Cinq| Six
type lum = Low| Normal| High
type couleur = Vert| Jaune| Rouge
type position = Ville| Autoroute
type etatPhares = Idle| Veilleuses| Codes| Phares
type cause = PresencePieton| Presencevehicule| Feu| None
machine moteur =
  var ck: st; pnr: bool;
  
  step(commande: bool, cle: bool) returns (etat: bool) {
    var v: bool; v_3: bool; v_2: bool; v_1: bool; r_St_Eteint: bool;
        s_St_Eteint: st; r_St_Allumer: bool; s_St_Allumer: st;
        nr_St_Eteint: bool; ns_St_Eteint: st; etat_St_Eteint: bool;
        nr_St_Allumer: bool; ns_St_Allumer: st; etat_St_Allumer: bool;
        ck_1: st; s: st; ns: st; r: bool; nr: bool;
    switch (mem(ck)) {
      case St_Allumer:
        v_2 = not(cle);
        v_1 = not(commande);
        v_3 = ((&) v_1 v_2);
        switch (v_3) {
          case true:
            r_St_Allumer = true;
            s_St_Allumer = St_Eteint
          case false:
            r_St_Allumer = mem(pnr);
            s_St_Allumer = St_Allumer
        };
        s = s_St_Allumer;
        r = r_St_Allumer
      case St_Eteint:
        v = ((&) commande cle);
        switch (v) {
          case true:
            r_St_Eteint = true;
            s_St_Eteint = St_Allumer
          case false:
            r_St_Eteint = mem(pnr);
            s_St_Eteint = St_Eteint
        };
        s = s_St_Eteint;
        r = r_St_Eteint
    };
    ck_1 = s;
    switch (ck_1) {
      case St_Allumer:
        etat_St_Allumer = true;
        nr_St_Allumer = false;
        ns_St_Allumer = St_Allumer;
        etat = etat_St_Allumer;
        ns = ns_St_Allumer;
        nr = nr_St_Allumer
      case St_Eteint:
        etat_St_Eteint = false;
        nr_St_Eteint = false;
        ns_St_Eteint = St_Eteint;
        etat = etat_St_Eteint;
        ns = ns_St_Eteint;
        nr = nr_St_Eteint
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_Allumer
  }

machine vitesse =
  var ck: st_1; pnr: bool;
  
  step(boiteDeVitesse: numero) returns (num: numero) {
    var v_15: bool; v_14: st_1; v_13: bool; v_12: st_1; v_11: bool;
        v_10: st_1; v_9: bool; v_8: st_1; v_7: bool; v_6: bool; v_5: bool;
        v_4: bool; v: bool; v_28: bool; v_27: st_1; v_26: bool; v_25: st_1;
        v_24: bool; v_23: st_1; v_22: bool; v_21: st_1; v_20: bool;
        v_19: bool; v_18: bool; v_17: bool; v_16: bool; v_41: bool;
        v_40: st_1; v_39: bool; v_38: st_1; v_37: bool; v_36: st_1;
        v_35: bool; v_34: st_1; v_33: bool; v_32: bool; v_31: bool;
        v_30: bool; v_29: bool; v_54: bool; v_53: st_1; v_52: bool;
        v_51: st_1; v_50: bool; v_49: st_1; v_48: bool; v_47: st_1;
        v_46: bool; v_45: bool; v_44: bool; v_43: bool; v_42: bool;
        v_67: bool; v_66: st_1; v_65: bool; v_64: st_1; v_63: bool;
        v_62: st_1; v_61: bool; v_60: st_1; v_59: bool; v_58: bool;
        v_57: bool; v_56: bool; v_55: bool; v_80: bool; v_79: st_1;
        v_78: bool; v_77: st_1; v_76: bool; v_75: st_1; v_74: bool;
        v_73: st_1; v_72: bool; v_71: bool; v_70: bool; v_69: bool;
        v_68: bool; r_St_1_Arriere: bool; s_St_1_Arriere: st_1;
        r_St_1_Cinquieme: bool; s_St_1_Cinquieme: st_1;
        r_St_1_Quatrieme: bool; s_St_1_Quatrieme: st_1;
        r_St_1_Troisieme: bool; s_St_1_Troisieme: st_1;
        r_St_1_Deuxieme: bool; s_St_1_Deuxieme: st_1; r_St_1_Premier: bool;
        s_St_1_Premier: st_1; nr_St_1_Arriere: bool; ns_St_1_Arriere: st_1;
        num_St_1_Arriere: numero; nr_St_1_Cinquieme: bool;
        ns_St_1_Cinquieme: st_1; num_St_1_Cinquieme: numero;
        nr_St_1_Quatrieme: bool; ns_St_1_Quatrieme: st_1;
        num_St_1_Quatrieme: numero; nr_St_1_Troisieme: bool;
        ns_St_1_Troisieme: st_1; num_St_1_Troisieme: numero;
        nr_St_1_Deuxieme: bool; ns_St_1_Deuxieme: st_1;
        num_St_1_Deuxieme: numero; nr_St_1_Premier: bool;
        ns_St_1_Premier: st_1; num_St_1_Premier: numero; ck_2: st_1; 
        s: st_1; ns: st_1; r: bool; nr: bool;
    switch (mem(ck)) {
      case St_1_Premier:
        v_72 = ((=) boiteDeVitesse Six);
        switch (v_72) {
          case true:
            v_74 = true;
            v_73 = St_1_Arriere
          case false:
            v_74 = mem(pnr);
            v_73 = St_1_Premier
        };
        v_71 = ((=) boiteDeVitesse Cinq);
        switch (v_71) {
          case true:
            v_76 = true;
            v_75 = St_1_Cinquieme
          case false:
            v_76 = v_74;
            v_75 = v_73
        };
        v_70 = ((=) boiteDeVitesse Quatre);
        switch (v_70) {
          case true:
            v_78 = true;
            v_77 = St_1_Quatrieme
          case false:
            v_78 = v_76;
            v_77 = v_75
        };
        v_69 = ((=) boiteDeVitesse Trois);
        switch (v_69) {
          case true:
            v_80 = true;
            v_79 = St_1_Troisieme
          case false:
            v_80 = v_78;
            v_79 = v_77
        };
        v_68 = ((=) boiteDeVitesse Deux);
        switch (v_68) {
          case true:
            r_St_1_Premier = true;
            s_St_1_Premier = St_1_Deuxieme
          case false:
            r_St_1_Premier = v_80;
            s_St_1_Premier = v_79
        };
        s = s_St_1_Premier;
        r = r_St_1_Premier
      case St_1_Deuxieme:
        v_59 = ((=) boiteDeVitesse Six);
        switch (v_59) {
          case true:
            v_61 = true;
            v_60 = St_1_Arriere
          case false:
            v_61 = mem(pnr);
            v_60 = St_1_Deuxieme
        };
        v_58 = ((=) boiteDeVitesse Cinq);
        switch (v_58) {
          case true:
            v_63 = true;
            v_62 = St_1_Cinquieme
          case false:
            v_63 = v_61;
            v_62 = v_60
        };
        v_57 = ((=) boiteDeVitesse Quatre);
        switch (v_57) {
          case true:
            v_65 = true;
            v_64 = St_1_Quatrieme
          case false:
            v_65 = v_63;
            v_64 = v_62
        };
        v_56 = ((=) boiteDeVitesse Trois);
        switch (v_56) {
          case true:
            v_67 = true;
            v_66 = St_1_Troisieme
          case false:
            v_67 = v_65;
            v_66 = v_64
        };
        v_55 = ((=) boiteDeVitesse Un);
        switch (v_55) {
          case true:
            r_St_1_Deuxieme = true;
            s_St_1_Deuxieme = St_1_Premier
          case false:
            r_St_1_Deuxieme = v_67;
            s_St_1_Deuxieme = v_66
        };
        s = s_St_1_Deuxieme;
        r = r_St_1_Deuxieme
      case St_1_Troisieme:
        v_46 = ((=) boiteDeVitesse Six);
        switch (v_46) {
          case true:
            v_48 = true;
            v_47 = St_1_Arriere
          case false:
            v_48 = mem(pnr);
            v_47 = St_1_Troisieme
        };
        v_45 = ((=) boiteDeVitesse Cinq);
        switch (v_45) {
          case true:
            v_50 = true;
            v_49 = St_1_Cinquieme
          case false:
            v_50 = v_48;
            v_49 = v_47
        };
        v_44 = ((=) boiteDeVitesse Quatre);
        switch (v_44) {
          case true:
            v_52 = true;
            v_51 = St_1_Quatrieme
          case false:
            v_52 = v_50;
            v_51 = v_49
        };
        v_43 = ((=) boiteDeVitesse Deux);
        switch (v_43) {
          case true:
            v_54 = true;
            v_53 = St_1_Deuxieme
          case false:
            v_54 = v_52;
            v_53 = v_51
        };
        v_42 = ((=) boiteDeVitesse Un);
        switch (v_42) {
          case true:
            r_St_1_Troisieme = true;
            s_St_1_Troisieme = St_1_Premier
          case false:
            r_St_1_Troisieme = v_54;
            s_St_1_Troisieme = v_53
        };
        s = s_St_1_Troisieme;
        r = r_St_1_Troisieme
      case St_1_Quatrieme:
        v_33 = ((=) boiteDeVitesse Six);
        switch (v_33) {
          case true:
            v_35 = true;
            v_34 = St_1_Arriere
          case false:
            v_35 = mem(pnr);
            v_34 = St_1_Quatrieme
        };
        v_32 = ((=) boiteDeVitesse Cinq);
        switch (v_32) {
          case true:
            v_37 = true;
            v_36 = St_1_Cinquieme
          case false:
            v_37 = v_35;
            v_36 = v_34
        };
        v_31 = ((=) boiteDeVitesse Trois);
        switch (v_31) {
          case true:
            v_39 = true;
            v_38 = St_1_Troisieme
          case false:
            v_39 = v_37;
            v_38 = v_36
        };
        v_30 = ((=) boiteDeVitesse Deux);
        switch (v_30) {
          case true:
            v_41 = true;
            v_40 = St_1_Deuxieme
          case false:
            v_41 = v_39;
            v_40 = v_38
        };
        v_29 = ((=) boiteDeVitesse Un);
        switch (v_29) {
          case true:
            r_St_1_Quatrieme = true;
            s_St_1_Quatrieme = St_1_Premier
          case false:
            r_St_1_Quatrieme = v_41;
            s_St_1_Quatrieme = v_40
        };
        s = s_St_1_Quatrieme;
        r = r_St_1_Quatrieme
      case St_1_Cinquieme:
        v_20 = ((=) boiteDeVitesse Six);
        switch (v_20) {
          case true:
            v_22 = true;
            v_21 = St_1_Arriere
          case false:
            v_22 = mem(pnr);
            v_21 = St_1_Cinquieme
        };
        v_19 = ((=) boiteDeVitesse Trois);
        switch (v_19) {
          case true:
            v_24 = true;
            v_23 = St_1_Troisieme
          case false:
            v_24 = v_22;
            v_23 = v_21
        };
        v_18 = ((=) boiteDeVitesse Quatre);
        switch (v_18) {
          case true:
            v_26 = true;
            v_25 = St_1_Troisieme
          case false:
            v_26 = v_24;
            v_25 = v_23
        };
        v_17 = ((=) boiteDeVitesse Deux);
        switch (v_17) {
          case true:
            v_28 = true;
            v_27 = St_1_Deuxieme
          case false:
            v_28 = v_26;
            v_27 = v_25
        };
        v_16 = ((=) boiteDeVitesse Un);
        switch (v_16) {
          case true:
            r_St_1_Cinquieme = true;
            s_St_1_Cinquieme = St_1_Premier
          case false:
            r_St_1_Cinquieme = v_28;
            s_St_1_Cinquieme = v_27
        };
        s = s_St_1_Cinquieme;
        r = r_St_1_Cinquieme
      case St_1_Arriere:
        v_7 = ((=) boiteDeVitesse Cinq);
        switch (v_7) {
          case true:
            v_9 = true;
            v_8 = St_1_Cinquieme
          case false:
            v_9 = mem(pnr);
            v_8 = St_1_Arriere
        };
        v_6 = ((=) boiteDeVitesse Trois);
        switch (v_6) {
          case true:
            v_11 = true;
            v_10 = St_1_Troisieme
          case false:
            v_11 = v_9;
            v_10 = v_8
        };
        v_5 = ((=) boiteDeVitesse Quatre);
        switch (v_5) {
          case true:
            v_13 = true;
            v_12 = St_1_Troisieme
          case false:
            v_13 = v_11;
            v_12 = v_10
        };
        v_4 = ((=) boiteDeVitesse Deux);
        switch (v_4) {
          case true:
            v_15 = true;
            v_14 = St_1_Deuxieme
          case false:
            v_15 = v_13;
            v_14 = v_12
        };
        v = ((=) boiteDeVitesse Un);
        switch (v) {
          case true:
            r_St_1_Arriere = true;
            s_St_1_Arriere = St_1_Premier
          case false:
            r_St_1_Arriere = v_15;
            s_St_1_Arriere = v_14
        };
        s = s_St_1_Arriere;
        r = r_St_1_Arriere
    };
    ck_2 = s;
    switch (ck_2) {
      case St_1_Premier:
        num_St_1_Premier = Un;
        nr_St_1_Premier = false;
        ns_St_1_Premier = St_1_Premier;
        num = num_St_1_Premier;
        ns = ns_St_1_Premier;
        nr = nr_St_1_Premier
      case St_1_Deuxieme:
        num_St_1_Deuxieme = Deux;
        nr_St_1_Deuxieme = false;
        ns_St_1_Deuxieme = St_1_Deuxieme;
        num = num_St_1_Deuxieme;
        ns = ns_St_1_Deuxieme;
        nr = nr_St_1_Deuxieme
      case St_1_Troisieme:
        num_St_1_Troisieme = Trois;
        nr_St_1_Troisieme = false;
        ns_St_1_Troisieme = St_1_Troisieme;
        num = num_St_1_Troisieme;
        ns = ns_St_1_Troisieme;
        nr = nr_St_1_Troisieme
      case St_1_Quatrieme:
        num_St_1_Quatrieme = Quatre;
        nr_St_1_Quatrieme = false;
        ns_St_1_Quatrieme = St_1_Quatrieme;
        num = num_St_1_Quatrieme;
        ns = ns_St_1_Quatrieme;
        nr = nr_St_1_Quatrieme
      case St_1_Cinquieme:
        num_St_1_Cinquieme = Cinq;
        nr_St_1_Cinquieme = false;
        ns_St_1_Cinquieme = St_1_Cinquieme;
        num = num_St_1_Cinquieme;
        ns = ns_St_1_Cinquieme;
        nr = nr_St_1_Cinquieme
      case St_1_Arriere:
        num_St_1_Arriere = Six;
        nr_St_1_Arriere = false;
        ns_St_1_Arriere = St_1_Arriere;
        num = num_St_1_Arriere;
        ns = ns_St_1_Arriere;
        nr = nr_St_1_Arriere
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_1_Premier
  }

machine acceleration =
  var ck: st_2; pnr: bool;
  
  step(moteur: bool, frein: bool, accelerateur: bool)
  returns (avance: bool) {
    var v: bool; v_82: bool; v_81: bool; r_St_2_Stop: bool;
        s_St_2_Stop: st_2; r_St_2_Move: bool; s_St_2_Move: st_2;
        nr_St_2_Stop: bool; ns_St_2_Stop: st_2; avance_St_2_Stop: bool;
        nr_St_2_Move: bool; ns_St_2_Move: st_2; avance_St_2_Move: bool;
        ck_3: st_2; s: st_2; ns: st_2; r: bool; nr: bool;
    switch (mem(ck)) {
      case St_2_Move:
        v_81 = not(moteur);
        v_82 = ((or) frein v_81);
        switch (v_82) {
          case true:
            r_St_2_Move = true;
            s_St_2_Move = St_2_Stop
          case false:
            r_St_2_Move = mem(pnr);
            s_St_2_Move = St_2_Move
        };
        s = s_St_2_Move;
        r = r_St_2_Move
      case St_2_Stop:
        v = ((&) moteur accelerateur);
        switch (v) {
          case true:
            r_St_2_Stop = true;
            s_St_2_Stop = St_2_Move
          case false:
            r_St_2_Stop = mem(pnr);
            s_St_2_Stop = St_2_Stop
        };
        s = s_St_2_Stop;
        r = r_St_2_Stop
    };
    ck_3 = s;
    switch (ck_3) {
      case St_2_Move:
        avance_St_2_Move = true;
        nr_St_2_Move = false;
        ns_St_2_Move = St_2_Move;
        avance = avance_St_2_Move;
        ns = ns_St_2_Move;
        nr = nr_St_2_Move
      case St_2_Stop:
        avance_St_2_Stop = false;
        nr_St_2_Stop = false;
        ns_St_2_Stop = St_2_Stop;
        avance = avance_St_2_Stop;
        ns = ns_St_2_Stop;
        nr = nr_St_2_Stop
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_2_Move
  }

machine retroviseurs =
  var ck: st_3; pnr: bool;
  
  step(moteur: bool, lumiere: lum) returns (gerer: bool) {
    var v_90: bool; v_89: st_3; v_88: bool; v_87: st_3; v_86: bool;
        v_85: bool; v_84: bool; v_83: bool; v: bool; v_99: bool; v_98: st_3;
        v_97: bool; v_96: st_3; v_95: bool; v_94: bool; v_93: bool;
        v_92: bool; v_91: bool; v_108: bool; v_107: st_3; v_106: bool;
        v_105: st_3; v_104: bool; v_103: bool; v_102: bool; v_101: bool;
        v_100: bool; v_119: bool; v_118: st_3; v_117: bool; v_116: st_3;
        v_115: bool; v_114: bool; v_113: bool; v_112: bool; v_111: bool;
        v_110: bool; v_109: bool; r_St_3_PositionNuit: bool;
        s_St_3_PositionNuit: st_3; r_St_3_PositionJour: bool;
        s_St_3_PositionJour: st_3; r_St_3_PositionNormale: bool;
        s_St_3_PositionNormale: st_3; r_St_3_Desacitve: bool;
        s_St_3_Desacitve: st_3; nr_St_3_PositionNuit: bool;
        ns_St_3_PositionNuit: st_3; gerer_St_3_PositionNuit: bool;
        nr_St_3_PositionJour: bool; ns_St_3_PositionJour: st_3;
        gerer_St_3_PositionJour: bool; nr_St_3_PositionNormale: bool;
        ns_St_3_PositionNormale: st_3; gerer_St_3_PositionNormale: bool;
        nr_St_3_Desacitve: bool; ns_St_3_Desacitve: st_3;
        gerer_St_3_Desacitve: bool; ck_4: st_3; s: st_3; ns: st_3; r: bool;
        nr: bool;
    switch (mem(ck)) {
      case St_3_Desacitve:
        v_114 = ((=) lumiere Normal);
        v_113 = not(moteur);
        v_115 = ((&) v_113 v_114);
        switch (v_115) {
          case true:
            v_117 = true;
            v_116 = St_3_PositionNormale
          case false:
            v_117 = mem(pnr);
            v_116 = St_3_Desacitve
        };
        v_111 = ((=) lumiere Low);
        v_112 = ((&) moteur v_111);
        switch (v_112) {
          case true:
            v_119 = true;
            v_118 = St_3_PositionNuit
          case false:
            v_119 = v_117;
            v_118 = v_116
        };
        v_109 = ((=) lumiere High);
        v_110 = ((&) moteur v_109);
        switch (v_110) {
          case true:
            r_St_3_Desacitve = true;
            s_St_3_Desacitve = St_3_PositionJour
          case false:
            r_St_3_Desacitve = v_119;
            s_St_3_Desacitve = v_118
        };
        s = s_St_3_Desacitve;
        r = r_St_3_Desacitve
      case St_3_PositionNormale:
        v_104 = not(moteur);
        switch (v_104) {
          case true:
            v_106 = true;
            v_105 = St_3_Desacitve
          case false:
            v_106 = mem(pnr);
            v_105 = St_3_PositionNormale
        };
        v_102 = ((=) lumiere Low);
        v_103 = ((&) moteur v_102);
        switch (v_103) {
          case true:
            v_108 = true;
            v_107 = St_3_PositionNuit
          case false:
            v_108 = v_106;
            v_107 = v_105
        };
        v_100 = ((=) lumiere High);
        v_101 = ((&) moteur v_100);
        switch (v_101) {
          case true:
            r_St_3_PositionNormale = true;
            s_St_3_PositionNormale = St_3_PositionJour
          case false:
            r_St_3_PositionNormale = v_108;
            s_St_3_PositionNormale = v_107
        };
        s = s_St_3_PositionNormale;
        r = r_St_3_PositionNormale
      case St_3_PositionJour:
        v_95 = not(moteur);
        switch (v_95) {
          case true:
            v_97 = true;
            v_96 = St_3_Desacitve
          case false:
            v_97 = mem(pnr);
            v_96 = St_3_PositionJour
        };
        v_93 = ((=) lumiere Low);
        v_94 = ((&) moteur v_93);
        switch (v_94) {
          case true:
            v_99 = true;
            v_98 = St_3_PositionNuit
          case false:
            v_99 = v_97;
            v_98 = v_96
        };
        v_91 = ((=) lumiere Normal);
        v_92 = ((&) moteur v_91);
        switch (v_92) {
          case true:
            r_St_3_PositionJour = true;
            s_St_3_PositionJour = St_3_PositionNormale
          case false:
            r_St_3_PositionJour = v_99;
            s_St_3_PositionJour = v_98
        };
        s = s_St_3_PositionJour;
        r = r_St_3_PositionJour
      case St_3_PositionNuit:
        v_86 = not(moteur);
        switch (v_86) {
          case true:
            v_88 = true;
            v_87 = St_3_Desacitve
          case false:
            v_88 = mem(pnr);
            v_87 = St_3_PositionNuit
        };
        v_84 = ((=) lumiere Normal);
        v_85 = ((&) moteur v_84);
        switch (v_85) {
          case true:
            v_90 = true;
            v_89 = St_3_PositionNormale
          case false:
            v_90 = v_88;
            v_89 = v_87
        };
        v = ((=) lumiere High);
        v_83 = ((&) moteur v);
        switch (v_83) {
          case true:
            r_St_3_PositionNuit = true;
            s_St_3_PositionNuit = St_3_PositionJour
          case false:
            r_St_3_PositionNuit = v_90;
            s_St_3_PositionNuit = v_89
        };
        s = s_St_3_PositionNuit;
        r = r_St_3_PositionNuit
    };
    ck_4 = s;
    switch (ck_4) {
      case St_3_Desacitve:
        gerer_St_3_Desacitve = false;
        nr_St_3_Desacitve = false;
        ns_St_3_Desacitve = St_3_Desacitve;
        gerer = gerer_St_3_Desacitve;
        ns = ns_St_3_Desacitve;
        nr = nr_St_3_Desacitve
      case St_3_PositionNormale:
        gerer_St_3_PositionNormale = true;
        nr_St_3_PositionNormale = false;
        ns_St_3_PositionNormale = St_3_PositionNormale;
        gerer = gerer_St_3_PositionNormale;
        ns = ns_St_3_PositionNormale;
        nr = nr_St_3_PositionNormale
      case St_3_PositionJour:
        gerer_St_3_PositionJour = true;
        nr_St_3_PositionJour = false;
        ns_St_3_PositionJour = St_3_PositionJour;
        gerer = gerer_St_3_PositionJour;
        ns = ns_St_3_PositionJour;
        nr = nr_St_3_PositionJour
      case St_3_PositionNuit:
        gerer_St_3_PositionNuit = true;
        nr_St_3_PositionNuit = false;
        ns_St_3_PositionNuit = St_3_PositionNuit;
        gerer = gerer_St_3_PositionNuit;
        ns = ns_St_3_PositionNuit;
        nr = nr_St_3_PositionNuit
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_3_Desacitve
  }

machine essuieGlace =
  var ck: st_4; pnr: bool;
  
  step(moteur: bool, capteurPluie: bool, densite: lum) returns (etat: bool) {
    var v_131: bool; v_130: st_4; v_129: bool; v_128: st_4; v_127: bool;
        v_126: bool; v_125: bool; v_124: bool; v_123: bool; v_122: bool;
        v_121: bool; v_120: bool; v: bool; v_144: bool; v_143: st_4;
        v_142: bool; v_141: st_4; v_140: bool; v_139: bool; v_138: bool;
        v_137: bool; v_136: bool; v_135: bool; v_134: bool; v_133: bool;
        v_132: bool; v_157: bool; v_156: st_4; v_155: bool; v_154: st_4;
        v_153: bool; v_152: bool; v_151: bool; v_150: bool; v_149: bool;
        v_148: bool; v_147: bool; v_146: bool; v_145: bool; v_158: bool;
        r_St_4_BalayageContiu: bool; s_St_4_BalayageContiu: st_4;
        r_St_4_BalayageIntermittent: bool; s_St_4_BalayageIntermittent: st_4;
        r_St_4_BalayageUnique: bool; s_St_4_BalayageUnique: st_4;
        r_St_4_Desactive: bool; s_St_4_Desactive: st_4;
        nr_St_4_BalayageContiu: bool; ns_St_4_BalayageContiu: st_4;
        etat_St_4_BalayageContiu: bool; nr_St_4_BalayageIntermittent: bool;
        ns_St_4_BalayageIntermittent: st_4;
        etat_St_4_BalayageIntermittent: bool; nr_St_4_BalayageUnique: bool;
        ns_St_4_BalayageUnique: st_4; etat_St_4_BalayageUnique: bool;
        nr_St_4_Desactive: bool; ns_St_4_Desactive: st_4;
        etat_St_4_Desactive: bool; ck_5: st_4; s: st_4; ns: st_4; r: bool;
        nr: bool;
    switch (mem(ck)) {
      case St_4_Desactive:
        v_158 = ((&) moteur capteurPluie);
        switch (v_158) {
          case true:
            r_St_4_Desactive = true;
            s_St_4_Desactive = St_4_BalayageUnique
          case false:
            r_St_4_Desactive = mem(pnr);
            s_St_4_Desactive = St_4_Desactive
        };
        s = s_St_4_Desactive;
        r = r_St_4_Desactive
      case St_4_BalayageUnique:
        v_152 = ((=) densite Normal);
        v_151 = ((&) moteur capteurPluie);
        v_153 = ((&) v_151 v_152);
        switch (v_153) {
          case true:
            v_155 = true;
            v_154 = St_4_BalayageIntermittent
          case false:
            v_155 = mem(pnr);
            v_154 = St_4_BalayageUnique
        };
        v_149 = ((=) densite High);
        v_148 = ((&) moteur capteurPluie);
        v_150 = ((&) v_148 v_149);
        switch (v_150) {
          case true:
            v_157 = true;
            v_156 = St_4_BalayageContiu
          case false:
            v_157 = v_155;
            v_156 = v_154
        };
        v_146 = not(moteur);
        v_145 = not(capteurPluie);
        v_147 = ((or) v_145 v_146);
        switch (v_147) {
          case true:
            r_St_4_BalayageUnique = true;
            s_St_4_BalayageUnique = St_4_Desactive
          case false:
            r_St_4_BalayageUnique = v_157;
            s_St_4_BalayageUnique = v_156
        };
        s = s_St_4_BalayageUnique;
        r = r_St_4_BalayageUnique
      case St_4_BalayageIntermittent:
        v_139 = ((=) densite Low);
        v_138 = ((&) moteur capteurPluie);
        v_140 = ((&) v_138 v_139);
        switch (v_140) {
          case true:
            v_142 = true;
            v_141 = St_4_BalayageUnique
          case false:
            v_142 = mem(pnr);
            v_141 = St_4_BalayageIntermittent
        };
        v_136 = ((=) densite High);
        v_135 = ((&) moteur capteurPluie);
        v_137 = ((&) v_135 v_136);
        switch (v_137) {
          case true:
            v_144 = true;
            v_143 = St_4_BalayageContiu
          case false:
            v_144 = v_142;
            v_143 = v_141
        };
        v_133 = not(moteur);
        v_132 = not(capteurPluie);
        v_134 = ((or) v_132 v_133);
        switch (v_134) {
          case true:
            r_St_4_BalayageIntermittent = true;
            s_St_4_BalayageIntermittent = St_4_Desactive
          case false:
            r_St_4_BalayageIntermittent = v_144;
            s_St_4_BalayageIntermittent = v_143
        };
        s = s_St_4_BalayageIntermittent;
        r = r_St_4_BalayageIntermittent
      case St_4_BalayageContiu:
        v_126 = ((=) densite Normal);
        v_125 = ((&) moteur capteurPluie);
        v_127 = ((&) v_125 v_126);
        switch (v_127) {
          case true:
            v_129 = true;
            v_128 = St_4_BalayageIntermittent
          case false:
            v_129 = mem(pnr);
            v_128 = St_4_BalayageContiu
        };
        v_123 = ((=) densite Low);
        v_122 = ((&) moteur capteurPluie);
        v_124 = ((&) v_122 v_123);
        switch (v_124) {
          case true:
            v_131 = true;
            v_130 = St_4_BalayageUnique
          case false:
            v_131 = v_129;
            v_130 = v_128
        };
        v_120 = not(moteur);
        v = not(capteurPluie);
        v_121 = ((or) v v_120);
        switch (v_121) {
          case true:
            r_St_4_BalayageContiu = true;
            s_St_4_BalayageContiu = St_4_Desactive
          case false:
            r_St_4_BalayageContiu = v_131;
            s_St_4_BalayageContiu = v_130
        };
        s = s_St_4_BalayageContiu;
        r = r_St_4_BalayageContiu
    };
    ck_5 = s;
    switch (ck_5) {
      case St_4_Desactive:
        etat_St_4_Desactive = false;
        nr_St_4_Desactive = false;
        ns_St_4_Desactive = St_4_Desactive;
        etat = etat_St_4_Desactive;
        ns = ns_St_4_Desactive;
        nr = nr_St_4_Desactive
      case St_4_BalayageUnique:
        etat_St_4_BalayageUnique = true;
        nr_St_4_BalayageUnique = false;
        ns_St_4_BalayageUnique = St_4_BalayageUnique;
        etat = etat_St_4_BalayageUnique;
        ns = ns_St_4_BalayageUnique;
        nr = nr_St_4_BalayageUnique
      case St_4_BalayageIntermittent:
        etat_St_4_BalayageIntermittent = true;
        nr_St_4_BalayageIntermittent = false;
        ns_St_4_BalayageIntermittent = St_4_BalayageIntermittent;
        etat = etat_St_4_BalayageIntermittent;
        ns = ns_St_4_BalayageIntermittent;
        nr = nr_St_4_BalayageIntermittent
      case St_4_BalayageContiu:
        etat_St_4_BalayageContiu = true;
        nr_St_4_BalayageContiu = false;
        ns_St_4_BalayageContiu = St_4_BalayageContiu;
        etat = etat_St_4_BalayageContiu;
        ns = ns_St_4_BalayageContiu;
        nr = nr_St_4_BalayageContiu
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_4_Desactive
  }

machine accident =
  var ck: st_5; pnr: bool;
  
  step(detectionAccident: bool)
  returns (airbag: bool, emissionAppelUrgence: bool) {
    var v: bool; r_St_5_Active: bool; s_St_5_Active: st_5;
        r_St_5_Desactive: bool; s_St_5_Desactive: st_5; nr_St_5_Active: bool;
        ns_St_5_Active: st_5; emissionAppelUrgence_St_5_Active: bool;
        airbag_St_5_Active: bool; nr_St_5_Desactive: bool;
        ns_St_5_Desactive: st_5; emissionAppelUrgence_St_5_Desactive: bool;
        airbag_St_5_Desactive: bool; ck_6: st_5; s: st_5; ns: st_5; r: bool;
        nr: bool;
    switch (mem(ck)) {
      case St_5_Desactive:
        switch (detectionAccident) {
          case true:
            r_St_5_Desactive = true;
            s_St_5_Desactive = St_5_Active
          case false:
            r_St_5_Desactive = mem(pnr);
            s_St_5_Desactive = St_5_Desactive
        };
        s = s_St_5_Desactive;
        r = r_St_5_Desactive
      case St_5_Active:
        v = not(detectionAccident);
        switch (v) {
          case true:
            r_St_5_Active = true;
            s_St_5_Active = St_5_Active
          case false:
            r_St_5_Active = mem(pnr);
            s_St_5_Active = St_5_Active
        };
        s = s_St_5_Active;
        r = r_St_5_Active
    };
    ck_6 = s;
    switch (ck_6) {
      case St_5_Desactive:
        emissionAppelUrgence_St_5_Desactive = false;
        airbag_St_5_Desactive = false;
        nr_St_5_Desactive = false;
        ns_St_5_Desactive = St_5_Desactive;
        airbag = airbag_St_5_Desactive;
        emissionAppelUrgence = emissionAppelUrgence_St_5_Desactive;
        ns = ns_St_5_Desactive;
        nr = nr_St_5_Desactive
      case St_5_Active:
        emissionAppelUrgence_St_5_Active = true;
        airbag_St_5_Active = true;
        nr_St_5_Active = false;
        ns_St_5_Active = St_5_Active;
        airbag = airbag_St_5_Active;
        emissionAppelUrgence = emissionAppelUrgence_St_5_Active;
        ns = ns_St_5_Active;
        nr = nr_St_5_Active
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_5_Desactive
  }

machine avertissement =
  var ck: st_6; pnr: bool;
  
  step(detectionDepassementLigne: bool, detectionVolantLibre: bool,
       detectionDefaillanceTechnique: bool, detectionVehiculeAngleMort: bool)
  returns (depassementLigne: bool, volantLibre: bool,
           defaillanceTechnique: bool, dangerAngleMort: bool) {
    var v_164: bool; v_163: bool; v_162: bool; v_161: bool; v_160: bool;
        v_159: bool; v: bool; v_167: bool; v_166: bool; v_165: bool;
        r_St_6_Detection: bool; s_St_6_Detection: st_6; r_St_6_Idle: bool;
        s_St_6_Idle: st_6; nr_St_6_Detection: bool; ns_St_6_Detection: st_6;
        dangerAngleMort_St_6_Detection: bool;
        defaillanceTechnique_St_6_Detection: bool;
        volantLibre_St_6_Detection: bool;
        depassementLigne_St_6_Detection: bool; nr_St_6_Idle: bool;
        ns_St_6_Idle: st_6; dangerAngleMort_St_6_Idle: bool;
        defaillanceTechnique_St_6_Idle: bool; volantLibre_St_6_Idle: bool;
        depassementLigne_St_6_Idle: bool; ck_7: st_6; s: st_6; ns: st_6;
        r: bool; nr: bool;
    switch (mem(ck)) {
      case St_6_Idle:
        v_165 = ((or) detectionDepassementLigne detectionVolantLibre);
        v_166 = ((or) v_165 detectionDefaillanceTechnique);
        v_167 = ((or) v_166 detectionVehiculeAngleMort);
        switch (v_167) {
          case true:
            r_St_6_Idle = true;
            s_St_6_Idle = St_6_Detection
          case false:
            r_St_6_Idle = mem(pnr);
            s_St_6_Idle = St_6_Idle
        };
        s = s_St_6_Idle;
        r = r_St_6_Idle
      case St_6_Detection:
        v_163 = not(detectionVehiculeAngleMort);
        v_161 = not(detectionDefaillanceTechnique);
        v_159 = not(detectionVolantLibre);
        v = not(detectionDepassementLigne);
        v_160 = ((&) v v_159);
        v_162 = ((&) v_160 v_161);
        v_164 = ((&) v_162 v_163);
        switch (v_164) {
          case true:
            r_St_6_Detection = true;
            s_St_6_Detection = St_6_Idle
          case false:
            r_St_6_Detection = mem(pnr);
            s_St_6_Detection = St_6_Detection
        };
        s = s_St_6_Detection;
        r = r_St_6_Detection
    };
    ck_7 = s;
    switch (ck_7) {
      case St_6_Idle:
        dangerAngleMort_St_6_Idle = false;
        defaillanceTechnique_St_6_Idle = false;
        volantLibre_St_6_Idle = false;
        depassementLigne_St_6_Idle = false;
        nr_St_6_Idle = false;
        ns_St_6_Idle = St_6_Idle;
        depassementLigne = depassementLigne_St_6_Idle;
        volantLibre = volantLibre_St_6_Idle;
        defaillanceTechnique = defaillanceTechnique_St_6_Idle;
        dangerAngleMort = dangerAngleMort_St_6_Idle;
        ns = ns_St_6_Idle;
        nr = nr_St_6_Idle
      case St_6_Detection:
        dangerAngleMort_St_6_Detection = detectionVehiculeAngleMort;
        defaillanceTechnique_St_6_Detection = detectionDefaillanceTechnique;
        volantLibre_St_6_Detection = detectionVolantLibre;
        depassementLigne_St_6_Detection = detectionDepassementLigne;
        nr_St_6_Detection = false;
        ns_St_6_Detection = St_6_Detection;
        depassementLigne = depassementLigne_St_6_Detection;
        volantLibre = volantLibre_St_6_Detection;
        defaillanceTechnique = defaillanceTechnique_St_6_Detection;
        dangerAngleMort = dangerAngleMort_St_6_Detection;
        ns = ns_St_6_Detection;
        nr = nr_St_6_Detection
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_6_Idle
  }

machine securite =
  var ck: st_7; pnr: bool;
  
  step(presencePieton: bool, presencevehicule: bool, feu: couleur)
  returns (frein: bool, causeFreinage: cause) {
    var v_177: bool; v_176: st_7; v_175: bool; v_174: st_7; v_173: bool;
        v_172: bool; v_171: bool; v_170: bool; v_169: bool; v_168: bool;
        v: bool; v_192: bool; v_191: st_7; v_190: bool; v_189: st_7;
        v_188: bool; v_187: bool; v_186: bool; v_185: bool; v_184: bool;
        v_183: bool; v_182: bool; v_181: bool; v_180: bool; v_179: bool;
        v_178: bool; v_209: bool; v_208: st_7; v_207: bool; v_206: st_7;
        v_205: bool; v_204: bool; v_203: bool; v_202: bool; v_201: bool;
        v_200: bool; v_199: bool; v_198: bool; v_197: bool; v_196: bool;
        v_195: bool; v_194: bool; v_193: bool; v_221: bool; v_220: st_7;
        v_219: bool; v_218: st_7; v_217: bool; v_216: bool; v_215: bool;
        v_214: bool; v_213: bool; v_212: bool; v_211: bool; v_210: bool;
        r_St_7_Feu: bool; s_St_7_Feu: st_7; r_St_7_Vehicule: bool;
        s_St_7_Vehicule: st_7; r_St_7_Pieton: bool; s_St_7_Pieton: st_7;
        r_St_7_Acceleration: bool; s_St_7_Acceleration: st_7;
        nr_St_7_Feu: bool; ns_St_7_Feu: st_7; causeFreinage_St_7_Feu: cause;
        frein_St_7_Feu: bool; nr_St_7_Vehicule: bool; ns_St_7_Vehicule: st_7;
        causeFreinage_St_7_Vehicule: cause; frein_St_7_Vehicule: bool;
        nr_St_7_Pieton: bool; ns_St_7_Pieton: st_7;
        causeFreinage_St_7_Pieton: cause; frein_St_7_Pieton: bool;
        nr_St_7_Acceleration: bool; ns_St_7_Acceleration: st_7;
        causeFreinage_St_7_Acceleration: cause;
        frein_St_7_Acceleration: bool; ck_8: st_7; s: st_7; ns: st_7;
        r: bool; nr: bool;
    switch (mem(ck)) {
      case St_7_Acceleration:
        v_215 = ((=) feu Vert);
        v_216 = not(v_215);
        v_213 = not(presencevehicule);
        v_212 = not(presencePieton);
        v_214 = ((&) v_212 v_213);
        v_217 = ((&) v_214 v_216);
        switch (v_217) {
          case true:
            v_219 = true;
            v_218 = St_7_Feu
          case false:
            v_219 = mem(pnr);
            v_218 = St_7_Acceleration
        };
        v_210 = not(presencePieton);
        v_211 = ((&) v_210 presencevehicule);
        switch (v_211) {
          case true:
            v_221 = true
          case false:
            v_221 = v_219
        };
        switch (presencePieton) {
          case true:
            r_St_7_Acceleration = true
          case false:
            r_St_7_Acceleration = v_221
        };
        switch (v_211) {
          case true:
            v_220 = St_7_Vehicule
          case false:
            v_220 = v_218
        };
        switch (presencePieton) {
          case true:
            s_St_7_Acceleration = St_7_Pieton
          case false:
            s_St_7_Acceleration = v_220
        };
        s = s_St_7_Acceleration;
        r = r_St_7_Acceleration
      case St_7_Pieton:
        v_203 = ((=) feu Vert);
        v_204 = not(v_203);
        v_201 = not(presencevehicule);
        v_200 = not(presencePieton);
        v_202 = ((&) v_200 v_201);
        v_205 = ((&) v_202 v_204);
        switch (v_205) {
          case true:
            v_207 = true;
            v_206 = St_7_Feu
          case false:
            v_207 = mem(pnr);
            v_206 = St_7_Pieton
        };
        v_198 = not(presencePieton);
        v_199 = ((&) v_198 presencevehicule);
        switch (v_199) {
          case true:
            v_209 = true;
            v_208 = St_7_Vehicule
          case false:
            v_209 = v_207;
            v_208 = v_206
        };
        v_196 = ((=) feu Vert);
        v_194 = not(presencevehicule);
        v_193 = not(presencePieton);
        v_195 = ((&) v_193 v_194);
        v_197 = ((&) v_195 v_196);
        switch (v_197) {
          case true:
            r_St_7_Pieton = true;
            s_St_7_Pieton = St_7_Acceleration
          case false:
            r_St_7_Pieton = v_209;
            s_St_7_Pieton = v_208
        };
        s = s_St_7_Pieton;
        r = r_St_7_Pieton
      case St_7_Vehicule:
        v_186 = ((=) feu Vert);
        v_187 = not(v_186);
        v_184 = not(presencevehicule);
        v_183 = not(presencePieton);
        v_185 = ((&) v_183 v_184);
        v_188 = ((&) v_185 v_187);
        switch (v_188) {
          case true:
            v_190 = true
          case false:
            v_190 = mem(pnr)
        };
        switch (presencePieton) {
          case true:
            v_192 = true
          case false:
            v_192 = v_190
        };
        switch (v_188) {
          case true:
            v_189 = St_7_Feu
          case false:
            v_189 = St_7_Vehicule
        };
        switch (presencePieton) {
          case true:
            v_191 = St_7_Pieton
          case false:
            v_191 = v_189
        };
        v_181 = ((=) feu Vert);
        v_179 = not(presencevehicule);
        v_178 = not(presencePieton);
        v_180 = ((&) v_178 v_179);
        v_182 = ((&) v_180 v_181);
        switch (v_182) {
          case true:
            r_St_7_Vehicule = true;
            s_St_7_Vehicule = St_7_Acceleration
          case false:
            r_St_7_Vehicule = v_192;
            s_St_7_Vehicule = v_191
        };
        s = s_St_7_Vehicule;
        r = r_St_7_Vehicule
      case St_7_Feu:
        v_172 = not(presencePieton);
        v_173 = ((&) v_172 presencevehicule);
        switch (v_173) {
          case true:
            v_175 = true
          case false:
            v_175 = mem(pnr)
        };
        switch (presencePieton) {
          case true:
            v_177 = true
          case false:
            v_177 = v_175
        };
        switch (v_173) {
          case true:
            v_174 = St_7_Vehicule
          case false:
            v_174 = St_7_Feu
        };
        switch (presencePieton) {
          case true:
            v_176 = St_7_Pieton
          case false:
            v_176 = v_174
        };
        v_170 = ((=) feu Vert);
        v_168 = not(presencevehicule);
        v = not(presencePieton);
        v_169 = ((&) v v_168);
        v_171 = ((&) v_169 v_170);
        switch (v_171) {
          case true:
            r_St_7_Feu = true;
            s_St_7_Feu = St_7_Acceleration
          case false:
            r_St_7_Feu = v_177;
            s_St_7_Feu = v_176
        };
        s = s_St_7_Feu;
        r = r_St_7_Feu
    };
    ck_8 = s;
    switch (ck_8) {
      case St_7_Acceleration:
        frein_St_7_Acceleration = false;
        causeFreinage_St_7_Acceleration = None;
        nr_St_7_Acceleration = false;
        ns_St_7_Acceleration = St_7_Acceleration;
        frein = frein_St_7_Acceleration;
        causeFreinage = causeFreinage_St_7_Acceleration;
        ns = ns_St_7_Acceleration;
        nr = nr_St_7_Acceleration
      case St_7_Pieton:
        frein_St_7_Pieton = true;
        causeFreinage_St_7_Pieton = PresencePieton;
        nr_St_7_Pieton = false;
        ns_St_7_Pieton = St_7_Pieton;
        frein = frein_St_7_Pieton;
        causeFreinage = causeFreinage_St_7_Pieton;
        ns = ns_St_7_Pieton;
        nr = nr_St_7_Pieton
      case St_7_Vehicule:
        frein_St_7_Vehicule = true;
        causeFreinage_St_7_Vehicule = Presencevehicule;
        nr_St_7_Vehicule = false;
        ns_St_7_Vehicule = St_7_Vehicule;
        frein = frein_St_7_Vehicule;
        causeFreinage = causeFreinage_St_7_Vehicule;
        ns = ns_St_7_Vehicule;
        nr = nr_St_7_Vehicule
      case St_7_Feu:
        frein_St_7_Feu = true;
        causeFreinage_St_7_Feu = Feu;
        nr_St_7_Feu = false;
        ns_St_7_Feu = St_7_Feu;
        frein = frein_St_7_Feu;
        causeFreinage = causeFreinage_St_7_Feu;
        ns = ns_St_7_Feu;
        nr = nr_St_7_Feu
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_7_Acceleration
  }

machine temperature =
  var ck: st_8; pnr: bool;
  
  step(deactivated: bool, capteur: float) returns (qt: float, etat: bool) {
    var v: bool; r_St_8_Desactive: bool; s_St_8_Desactive: st_8;
        r_St_8_Active: bool; s_St_8_Active: st_8; nr_St_8_Desactive: bool;
        ns_St_8_Desactive: st_8; etat_St_8_Desactive: bool;
        qt_St_8_Desactive: float; nr_St_8_Active: bool; ns_St_8_Active: st_8;
        etat_St_8_Active: bool; qt_St_8_Active: float; ck_9: st_8; s: st_8;
        ns: st_8; r: bool; nr: bool;
    switch (mem(ck)) {
      case St_8_Active:
        switch (deactivated) {
          case true:
            r_St_8_Active = true;
            s_St_8_Active = St_8_Desactive
          case false:
            r_St_8_Active = mem(pnr);
            s_St_8_Active = St_8_Active
        };
        s = s_St_8_Active;
        r = r_St_8_Active
      case St_8_Desactive:
        v = not(deactivated);
        switch (v) {
          case true:
            r_St_8_Desactive = true;
            s_St_8_Desactive = St_8_Active
          case false:
            r_St_8_Desactive = mem(pnr);
            s_St_8_Desactive = St_8_Desactive
        };
        s = s_St_8_Desactive;
        r = r_St_8_Desactive
    };
    ck_9 = s;
    switch (ck_9) {
      case St_8_Active:
        etat_St_8_Active = true;
        qt_St_8_Active = ((-.) capteur 19.000000);
        nr_St_8_Active = false;
        ns_St_8_Active = St_8_Active;
        qt = qt_St_8_Active;
        etat = etat_St_8_Active;
        ns = ns_St_8_Active;
        nr = nr_St_8_Active
      case St_8_Desactive:
        etat_St_8_Desactive = false;
        qt_St_8_Desactive = 0.000000;
        nr_St_8_Desactive = false;
        ns_St_8_Desactive = St_8_Desactive;
        qt = qt_St_8_Desactive;
        etat = etat_St_8_Desactive;
        ns = ns_St_8_Desactive;
        nr = nr_St_8_Desactive
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_8_Active
  }

machine controleurPhares =
  var ck: st_9; pnr: bool;
  
  step()
  returns (codes: bool, phares: bool, veilleuses: bool, etat: etatPhares) {
    var v_222: bool; v: st_9; v_224: bool; v_223: st_9; r_St_9_Phares: bool;
        s_St_9_Phares: st_9; r_St_9_Codes: bool; s_St_9_Codes: st_9;
        r_St_9_Veilleuses: bool; s_St_9_Veilleuses: st_9; r_St_9_Idle: bool;
        s_St_9_Idle: st_9; nr_St_9_Phares: bool; ns_St_9_Phares: st_9;
        etat_St_9_Phares: etatPhares; veilleuses_St_9_Phares: bool;
        phares_St_9_Phares: bool; codes_St_9_Phares: bool;
        nr_St_9_Codes: bool; ns_St_9_Codes: st_9;
        etat_St_9_Codes: etatPhares; veilleuses_St_9_Codes: bool;
        phares_St_9_Codes: bool; codes_St_9_Codes: bool;
        nr_St_9_Veilleuses: bool; ns_St_9_Veilleuses: st_9;
        etat_St_9_Veilleuses: etatPhares; veilleuses_St_9_Veilleuses: bool;
        phares_St_9_Veilleuses: bool; codes_St_9_Veilleuses: bool;
        nr_St_9_Idle: bool; ns_St_9_Idle: st_9; etat_St_9_Idle: etatPhares;
        veilleuses_St_9_Idle: bool; phares_St_9_Idle: bool;
        codes_St_9_Idle: bool; ck_10: st_9; s: st_9; ns: st_9; r: bool;
        nr: bool;
    switch (mem(ck)) {
      case St_9_Idle:
        switch (td) {
          case true:
            r_St_9_Idle = true;
            s_St_9_Idle = St_9_Veilleuses
          case false:
            r_St_9_Idle = mem(pnr);
            s_St_9_Idle = St_9_Idle
        };
        s = s_St_9_Idle;
        r = r_St_9_Idle
      case St_9_Veilleuses:
        switch (td) {
          case true:
            v_224 = true
          case false:
            v_224 = mem(pnr)
        };
        switch (ti) {
          case true:
            r_St_9_Veilleuses = true
          case false:
            r_St_9_Veilleuses = v_224
        };
        switch (td) {
          case true:
            v_223 = St_9_Codes
          case false:
            v_223 = St_9_Veilleuses
        };
        switch (ti) {
          case true:
            s_St_9_Veilleuses = St_9_Idle
          case false:
            s_St_9_Veilleuses = v_223
        };
        s = s_St_9_Veilleuses;
        r = r_St_9_Veilleuses
      case St_9_Codes:
        switch (cp) {
          case true:
            v_222 = true
          case false:
            v_222 = mem(pnr)
        };
        switch (ti) {
          case true:
            r_St_9_Codes = true
          case false:
            r_St_9_Codes = v_222
        };
        switch (cp) {
          case true:
            v = St_9_Phares
          case false:
            v = St_9_Codes
        };
        switch (ti) {
          case true:
            s_St_9_Codes = St_9_Veilleuses
          case false:
            s_St_9_Codes = v
        };
        s = s_St_9_Codes;
        r = r_St_9_Codes
      case St_9_Phares:
        switch (cp) {
          case true:
            r_St_9_Phares = true;
            s_St_9_Phares = St_9_Codes
          case false:
            r_St_9_Phares = mem(pnr);
            s_St_9_Phares = St_9_Phares
        };
        s = s_St_9_Phares;
        r = r_St_9_Phares
    };
    ck_10 = s;
    switch (ck_10) {
      case St_9_Idle:
        etat_St_9_Idle = Idle;
        veilleuses_St_9_Idle = false;
        phares_St_9_Idle = false;
        codes_St_9_Idle = false;
        nr_St_9_Idle = false;
        ns_St_9_Idle = St_9_Idle;
        codes = codes_St_9_Idle;
        phares = phares_St_9_Idle;
        veilleuses = veilleuses_St_9_Idle;
        etat = etat_St_9_Idle;
        ns = ns_St_9_Idle;
        nr = nr_St_9_Idle
      case St_9_Veilleuses:
        etat_St_9_Veilleuses = Veilleuses;
        veilleuses_St_9_Veilleuses = true;
        phares_St_9_Veilleuses = false;
        codes_St_9_Veilleuses = false;
        nr_St_9_Veilleuses = false;
        ns_St_9_Veilleuses = St_9_Veilleuses;
        codes = codes_St_9_Veilleuses;
        phares = phares_St_9_Veilleuses;
        veilleuses = veilleuses_St_9_Veilleuses;
        etat = etat_St_9_Veilleuses;
        ns = ns_St_9_Veilleuses;
        nr = nr_St_9_Veilleuses
      case St_9_Codes:
        etat_St_9_Codes = Codes;
        veilleuses_St_9_Codes = false;
        phares_St_9_Codes = false;
        codes_St_9_Codes = true;
        nr_St_9_Codes = false;
        ns_St_9_Codes = St_9_Codes;
        codes = codes_St_9_Codes;
        phares = phares_St_9_Codes;
        veilleuses = veilleuses_St_9_Codes;
        etat = etat_St_9_Codes;
        ns = ns_St_9_Codes;
        nr = nr_St_9_Codes
      case St_9_Phares:
        etat_St_9_Phares = Phares;
        veilleuses_St_9_Phares = false;
        phares_St_9_Phares = true;
        codes_St_9_Phares = false;
        nr_St_9_Phares = false;
        ns_St_9_Phares = St_9_Phares;
        codes = codes_St_9_Phares;
        phares = phares_St_9_Phares;
        veilleuses = veilleuses_St_9_Phares;
        etat = etat_St_9_Phares;
        ns = ns_St_9_Phares;
        nr = nr_St_9_Phares
    };
    mem(pnr) = nr;
    mem(ck) = ns
  }

  reset() returns () {
    mem(pnr) = false;
    mem(ck) = St_9_Idle
  }

machine automobile =
  obj moteur_3 : moteur;vitesse : vitesse;retroviseurs : retroviseurs
                                          ;essuieGlace_1 : essuieGlace
                                           ;accident_1 : accident;
      avertissement : avertissement;securite : securite;
      temperature : temperature;
  
  step(lumiere: lum, densitePluie: lum, cle: bool, capteurPluie: bool,
       commande: bool, detectionAccident: bool, detectionLigne: bool,
       detectionVolantLibre: bool, detectionDefaillanceTechnique: bool,
       detectionAngleMort: bool, presencePieton: bool,
       presencevehicule: bool, regulateurTemperature: bool,
       capteurTemperature: float, feu: couleur, boiteDeVitesse: numero)
  returns (moteur: bool, etatRetroviseur: bool,
           etatRegulateurTemperature: bool, essuieGlace: bool,
           accident: bool, ligne: bool, volantLibre: bool,
           defaillanceTechnique: bool, angleMort: bool, stop: bool,
           causeFreinage: cause, vitesses: numero, quantiteRegule: float) {
    var lmoteur: bool; lretroviseur: bool; lessuieGlace: bool; lairbag: bool;
        lemissionAppelUrgence: bool; lLigne: bool; lvolantLibre: bool;
        ldefaillanceTechnique: bool; langleMort: bool; lfrein: bool;
        letatRegulateurTemperature: bool; lnumero: numero; lqt: float;
        lcause: cause;
    (lmoteur) = moteur_3.step(commande, cle);
    (lnumero) = vitesse.step(boiteDeVitesse);
    (lretroviseur) = retroviseurs.step(lmoteur, lumiere);
    (lessuieGlace) = essuieGlace_1.step(lmoteur, capteurPluie, densitePluie);
    (lairbag,lemissionAppelUrgence) = accident_1.step(detectionAccident);
    (lLigne,lvolantLibre,ldefaillanceTechnique,langleMort) =
      avertissement.step(detectionLigne, detectionVolantLibre,
      detectionDefaillanceTechnique, detectionAngleMort);
    (lfrein,lcause) = securite.step(presencePieton, presencevehicule, feu);
    (lqt,letatRegulateurTemperature) =
      temperature.step(regulateurTemperature, capteurTemperature);
    moteur = lmoteur;
    etatRetroviseur = lretroviseur;
    etatRegulateurTemperature = letatRegulateurTemperature;
    essuieGlace = lessuieGlace;
    accident = ((or) lairbag lemissionAppelUrgence);
    ligne = lLigne;
    volantLibre = lvolantLibre;
    defaillanceTechnique = ldefaillanceTechnique;
    angleMort = langleMort;
    stop = lfrein;
    causeFreinage = lcause;
    vitesses = lnumero;
    quantiteRegule = lqt
  }

  reset() returns () {
    moteur_3.reset();
    vitesse.reset();
    retroviseurs.reset();
    essuieGlace_1.reset();
    accident_1.reset();
    avertissement.reset();
    securite.reset();
    temperature.reset()
  }


